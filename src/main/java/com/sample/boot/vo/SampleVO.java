package com.sample.boot.vo;

import lombok.Data;

import javax.validation.constraints.*;

@Data
public class SampleVO {
    @NotNull(message = "공백은 허용, Null은 비허용")
    private String memo;

    @NotBlank(message = "이름은 필수 입력 값 입니다.")
    private String name;

    @NotBlank
    @Email(regexp = "^[\\w!#$%&'*+/=?`{|}~^-]+(?:\\.[\\w!#$%&'*+/=?`{|}~^-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,6}$")
    private String email;

    @NotBlank
    @Size(min = 11, max = 13, message = "전화번호는 11~13자 사이로 입력해 주세요.")
    private String phone;

    @NotBlank
    @Pattern(regexp = "^(19|20)\\d{2}.(0[1-9]|1[012]).(0[1-9]|[12][0-9]|3[0-1])$")  // ex) 2020.07.13
    private String birthDay;

    @Pattern(regexp = "^(19|20)\\d{2}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[0-1])$")  // ex) 20200713
    private String regDt;



    @Positive(message = "가격은 숫자만 입력 가능 하며, 필수 입력 값 입니다.")
    @Min(value = 1000, message = "가격은 1,000 원 이상 입력해 주세요.")
    private int price;

    @Positive(message = "나이는 필수 파라미터입니다.")
    private int year;

    @Size(min = 1, message = "Null 허용, 공백 허용")
    private String cont;

/***********************************************************************************************
 (*필수) : 필수 입력 체크
 설명 : 검증할 Controller 의 매개변수에 @Valid 어노테이션 선언
 ex) @Valid ValidationVO validationVO
 ***********************************************************************************************/


/***********************************************************************************************
 기타 검사
 ***********************************************************************************************
 * @NotNull           // null 비허용 (*필수)
 * @NotEmpty          // " " 허용, null,"" 비허용 (*필수)
 * @Pattern           // 정규식 검사
 * @Email             // email 형식 검사 (기본 제공)
 * @AssertTrue        // true 값만 통과 가능
 * @AssertFalse       // false 값만 통과 가능
 ***********************************************************************************************/


/***********************************************************************************************
 문자열 검사
 ***********************************************************************************************
 * @NotBlank           // {null, "", " "} 비허용 (*필수)
 * @Length(min=,max=)  // 문자열 길이 min 과 max 사이 인지 검증
 * @Size (min=,max=)   // 문자열 또는 배열이 지정된 값 사이일 경우 통과 가능
 ***********************************************************************************************/


/***********************************************************************************************
 숫자 검사
 ***********************************************************************************************
 * @Positive           // 양수만 허용 (*필수)
 * @PositiveOrZero     // 양수, 0 허용 (*필수)
 * @Negative           // 음수만 허용 (*필수)
 * @NegativeOrZero     // 음수, 0 허용 (*필수)
 * @Digits             // 정수 허용 자리수, 소수점 허용 자리수
 *
 * @Range(min=,max=)   // 숫자 범위 체크
 * @Min                // 정수 최소값 지정 (*필수)
 * @Max                // 정수 최대값 지정
 *
 * @DecimalMax         // 지정된 값 이하의 실수만 통과 가능
 * @DecimalMin         // 지정된 값 이상의 실수만 통과 가능
 *
 * @Digits(integer=,fraction=) : 대상 수가 지정된 정수와 소수 자리수 보다 적을 경우 통과 가능
 ***********************************************************************************************/


/***********************************************************************************************
 날짜 검사
 ***********************************************************************************************
 * @Past : 대상 날짜가 현재 보다 과거일 경우만 통과 가능
 * @Future : 대상 날짜가 현재 보다 미래일 경우만 통과 가능
 ***********************************************************************************************/
}